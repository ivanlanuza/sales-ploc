// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String?
  auth      String?
  createdAt DateTime  @default(now())
  isActive  Boolean   @default(true)
  Action    Action[]
  Company   Company[]
}

model Status {
  id                 String               @id @default(cuid())
  code               String?
  name               String?
  description        String?
  nextActionId       String?
  ActionTypeOnStatus ActionTypeOnStatus[]
  Company            Company[]
}

model ActionType {
  id                 String               @id @default(cuid())
  code               String?
  description        String?
  visibleSequence    String?
  Fields             Field[]
  ActionTypeOnStatus ActionTypeOnStatus[]
  Action             Action[]
}

model Field {
  id           String       @id @default(cuid())
  code         String?
  name         String?
  description  String?
  options      String?
  actiontypeId String
  value        String?      @default("")
  actiontype   ActionType   @relation(fields: [actiontypeId], references: [id], onDelete: Cascade)
  fieldType    String
  ActionData   ActionData[]
  Action       Action?      @relation(fields: [actionId], references: [id])
  actionId     String?
}

model ActionTypeOnStatus {
  id           String     @id @default(cuid())
  actionId     String
  statusId     String
  nextStatusId String?
  actiontype   ActionType @relation(fields: [actionId], references: [id], onDelete: Cascade)
  status       Status     @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Company {
  id             String        @id @default(cuid())
  name           String?
  other_name     String?
  isActive       Boolean       @default(true)
  statusId       String
  status         Status        @relation(fields: [statusId], references: [id], onDelete: Cascade)
  segmentId      String
  segment        Segment       @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  sourceId       String
  source         Source        @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  businesstypeId String
  businesstype   BusinessType  @relation(fields: [businesstypeId], references: [id], onDelete: Cascade)
  ContactInfo    ContactInfo[]
  Action         Action[]
  createdAt      DateTime      @default(now())
  address        String?
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Segment {
  id           String         @id @default(cuid())
  code         String?
  name         String?
  BusinessType BusinessType[]
  Company      Company[]
}

model Source {
  id      String    @id @default(cuid())
  code    String?
  name    String?
  Company Company[]
}

model BusinessType {
  id        String  @id @default(cuid())
  code      String?
  name      String?
  segmentId String
  segment   Segment @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  Company Company[]
}

model ContactInfo {
  id         String  @id @default(cuid())
  companyId  String
  company    Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name       String?
  mobile     String?
  email      String?
  role       String?
  notes      String?
  isPrimary  Boolean @default(false)
  isDeleted  Boolean @default(false)
  isObsolete Boolean @default(false)
}

model Action {
  id           String       @id @default(cuid())
  companyId    String
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  actiontypeId String
  actiontype   ActionType   @relation(fields: [actiontypeId], references: [id], onDelete: Cascade)
  createdBy    String
  user         User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  businessDate DateTime     @default(now())
  ActionData   ActionData[]
  Field        Field[]
}

model ActionData {
  id       String @id @default(cuid())
  actionId String
  action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
  fieldId  String
  field    Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value    String
}
